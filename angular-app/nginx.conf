# I had claude ai to generate this for me, then made a few changes
# most settings are pretty standard like SSL conf and gzip compression
# the security headers sound good to me but I didn't look into them
# in practice I would dive deep into best practices and make sure each line of the
# configuration is properly set given the project requirements and server resources
# but these look like decent defaults for the purpose of this exercise


# Run Nginx as the less-privileged nginx user
user nginx;

# Auto-detect the number of CPU cores and spawn one worker per core
worker_processes auto;

# Set the error log path and level
error_log /var/log/nginx/error.log warn;

# Define the file that will store the process ID of the main process
pid /var/run/nginx.pid;

events {
    # should be tuned for expected load and server resources
    worker_connections 1024;
}

http {
    # Include MIME types definitions
    include /etc/nginx/mime.types;
    # Set default MIME type if not detected
    default_type application/octet-stream;

    # Define log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Configure access log
    access_log /var/log/nginx/access.log main;

    # Optimize file sending
    sendfile on;
    # Optimize sending of TCP packets
    tcp_nopush on;
    tcp_nodelay on;
    # Set timeout for keep-alive connections
    keepalive_timeout 65;
    # Set maximum size of types hash tables
    types_hash_max_size 2048;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3; 
    # Use strong cipher suites
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Gzip compression settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # Compression level (1-9)
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    # Compress various file types to reduce bandwidth usage
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    server {
        # Listen on port 4200 (matches Dockerfile)
        listen 4200;
        server_name localhost;
        # Root directory for the Angular app
        root /usr/share/nginx/html;
        index index.html index.htm;

        location / {
            # Support Angular's HTML5 routing
            try_files $uri $uri/ /index.html;
        }

        # Cache static assets
        location ~* \.(?:jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always; # Prevent clickjacking
        add_header X-XSS-Protection "1; mode=block" always; # Enable browser's XSS filter
        add_header X-Content-Type-Options "nosniff" always; # Prevent MIME type sniffing
        add_header Referrer-Policy "no-referrer-when-downgrade" always; # Control the Referer header
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always; # Basic CSP (should be customized)
        add_header Permissions-Policy "interest-cohort=()" always; # Opt out of FLoC

        # Disable server tokens for security
        server_tokens off;

        # Redirect server error pages to static page
        error_page 500 502 503 504 /50x.html;
        # using the nginx default 50x.html 
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
